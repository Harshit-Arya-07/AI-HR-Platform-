{"ast":null,"code":"import { api } from './authService';\nclass JobService {\n  // Get all jobs\n  async getJobs(filters) {\n    try {\n      const params = new URLSearchParams();\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          if (value !== undefined && value !== null) {\n            params.append(key, value.toString());\n          }\n        });\n      }\n      const response = await api.get(`/api/jobs?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch jobs');\n    }\n  }\n\n  // Get job by ID\n  async getJobById(id) {\n    try {\n      const response = await api.get(`/api/jobs/${id}`);\n      return response.data.job;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch job');\n    }\n  }\n\n  // Create new job\n  async createJob(data) {\n    try {\n      const response = await api.post('/api/jobs', data);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create job');\n    }\n  }\n\n  // Update job\n  async updateJob(id, data) {\n    try {\n      const response = await api.patch(`/api/jobs/${id}`, data);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update job');\n    }\n  }\n\n  // Delete job\n  async deleteJob(id) {\n    try {\n      const response = await api.delete(`/api/jobs/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete job');\n    }\n  }\n}\nexport const jobService = new JobService();","map":{"version":3,"names":["api","JobService","getJobs","filters","params","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","response","get","data","error","_error$response","_error$response$data","Error","message","getJobById","id","job","_error$response2","_error$response2$data","createJob","post","_error$response3","_error$response3$data","updateJob","patch","_error$response4","_error$response4$data","deleteJob","delete","_error$response5","_error$response5$data","jobService"],"sources":["D:/Projects/AI Resumer/frontend/src/services/jobService.ts"],"sourcesContent":["import { api } from './authService';\r\n\r\nexport interface Job {\r\n  _id: string;\r\n  title: string;\r\n  company: string;\r\n  description: string;\r\n  requirements: string[];\r\n  location?: string;\r\n  salaryRange?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  status: 'active' | 'paused' | 'closed';\r\n  candidateCount: number;\r\n  createdBy: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface CreateJobData {\r\n  title: string;\r\n  company: string;\r\n  description: string;\r\n  requirements: string[];\r\n  location?: string;\r\n  salaryRange?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n}\r\n\r\nexport interface JobsResponse {\r\n  jobs: Job[];\r\n  pagination?: {\r\n    total: number;\r\n    page: number;\r\n    pages: number;\r\n    limit: number;\r\n  };\r\n}\r\n\r\nclass JobService {\r\n  // Get all jobs\r\n  async getJobs(filters?: {\r\n    status?: string;\r\n    limit?: number;\r\n    skip?: number;\r\n  }): Promise<JobsResponse> {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      if (filters) {\r\n        Object.entries(filters).forEach(([key, value]) => {\r\n          if (value !== undefined && value !== null) {\r\n            params.append(key, value.toString());\r\n          }\r\n        });\r\n      }\r\n\r\n      const response = await api.get(`/api/jobs?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch jobs');\r\n    }\r\n  }\r\n\r\n  // Get job by ID\r\n  async getJobById(id: string): Promise<Job> {\r\n    try {\r\n      const response = await api.get(`/api/jobs/${id}`);\r\n      return response.data.job;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch job');\r\n    }\r\n  }\r\n\r\n  // Create new job\r\n  async createJob(data: CreateJobData): Promise<{ message: string; job: Job }> {\r\n    try {\r\n      const response = await api.post('/api/jobs', data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Failed to create job');\r\n    }\r\n  }\r\n\r\n  // Update job\r\n  async updateJob(id: string, data: Partial<CreateJobData>): Promise<{ message: string; job: Job }> {\r\n    try {\r\n      const response = await api.patch(`/api/jobs/${id}`, data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Failed to update job');\r\n    }\r\n  }\r\n\r\n  // Delete job\r\n  async deleteJob(id: string): Promise<{ message: string }> {\r\n    try {\r\n      const response = await api.delete(`/api/jobs/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Failed to delete job');\r\n    }\r\n  }\r\n}\r\n\r\nexport const jobService = new JobService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}