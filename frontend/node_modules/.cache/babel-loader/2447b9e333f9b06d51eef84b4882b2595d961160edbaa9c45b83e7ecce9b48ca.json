{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nclass AuthService {\n  async login(email, password) {\n    try {\n      const response = await api.post('/api/auth/login', {\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Login failed');\n    }\n  }\n  async register(userData) {\n    try {\n      const response = await api.post('/api/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Registration failed');\n    }\n  }\n  async getProfile() {\n    try {\n      const response = await api.get('/api/auth/profile');\n      return response.data.user;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to get profile');\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n}\nexport const authService = new AuthService();\nexport { api };","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","AuthService","login","email","password","post","data","_error$response2","_error$response2$data","Error","message","register","userData","_error$response3","_error$response3$data","getProfile","get","user","_error$response4","_error$response4$data","logout","authService"],"sources":["D:/Projects/AI Resumer/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  company?: string;\r\n  lastLogin?: string;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  message: string;\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\nclass AuthService {\r\n  async login(email: string, password: string): Promise<LoginResponse> {\r\n    try {\r\n      const response = await api.post('/api/auth/login', { email, password });\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Login failed');\r\n    }\r\n  }\r\n\r\n  async register(userData: {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n    company?: string;\r\n    role?: string;\r\n  }): Promise<LoginResponse> {\r\n    try {\r\n      const response = await api.post('/api/auth/register', userData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Registration failed');\r\n    }\r\n  }\r\n\r\n  async getProfile(): Promise<User> {\r\n    try {\r\n      const response = await api.get('/api/auth/profile');\r\n      return response.data.user;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Failed to get profile');\r\n    }\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();\r\nexport { api };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}