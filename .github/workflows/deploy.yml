name: Build and Deploy to AWS ECS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: hr-platform
  ECS_CLUSTER: hr-platform-cluster
  
jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    strategy:
      matrix:
        service: [ml-service, backend, frontend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (for backend and frontend)
      if: matrix.service != 'ml-service'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json
        
    - name: Setup Python (for ml-service)
      if: matrix.service == 'ml-service'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: ${{ matrix.service }}/requirements.txt
        
    - name: Install dependencies (Node.js)
      if: matrix.service != 'ml-service'
      working-directory: ./${{ matrix.service }}
      run: npm ci
      
    - name: Install dependencies (Python)
      if: matrix.service == 'ml-service'
      working-directory: ./${{ matrix.service }}
      run: |
        pip install -r requirements.txt
        python -m spacy download en_core_web_sm
        
    - name: Run tests (Node.js)
      if: matrix.service != 'ml-service'
      working-directory: ./${{ matrix.service }}
      run: npm test
      
    - name: Run tests (Python)
      if: matrix.service == 'ml-service'
      working-directory: ./${{ matrix.service }}
      run: python -m pytest tests/
      
    - name: Run linting (Node.js)
      if: matrix.service != 'ml-service'
      working-directory: ./${{ matrix.service }}
      run: npm run lint
      
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [ml-service, backend, frontend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_PREFIX }}-${{ matrix.service }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./${{ matrix.service }}
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Update ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: infra/task-definitions/${{ matrix.service }}-task-definition.json
        container-name: ${{ matrix.service }}
        image: ${{ steps.build-image.outputs.image }}
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: hr-platform-${{ matrix.service }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
  notify-deployment:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          HR Platform deployment ${{ job.status }}!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  performance-test:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run performance tests
      working-directory: ./tests
      run: k6 run performance/load-test.js
      env:
        API_BASE_URL: ${{ secrets.STAGING_API_URL }}
        
  cleanup:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build-and-deploy, performance-test]
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Clean up old ECR images
      run: |
        # Keep only the latest 5 images in each repository
        for repo in ml-service backend frontend; do
          aws ecr describe-images \
            --repository-name hr-platform-$repo \
            --query 'sort_by(imageDetails,& imageDigest)[:-5].[imageDigest]' \
            --output text | \
          while read digest; do
            if [ "$digest" != "None" ] && [ "$digest" != "" ]; then
              aws ecr batch-delete-image \
                --repository-name hr-platform-$repo \
                --image-ids imageDigest=$digest
            fi
          done
        done