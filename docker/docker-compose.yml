version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: hr-platform-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: hr_platform
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    networks:
      - hr-platform-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service (FastAPI + scikit-learn)
  ml-service:
    build:
      context: ../ml-service
      dockerfile: Dockerfile
    container_name: hr-platform-ml-service
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/hr_platform?authSource=admin
      - ENVIRONMENT=docker
      - LOG_LEVEL=info
      - MODEL_PATH=/app/models
    volumes:
      - ml_models:/app/models
    networks:
      - hr-platform-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service (Node.js + Express)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: hr-platform-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/hr_platform?authSource=admin
      - ML_SERVICE_URL=http://ml-service:8000
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - FRONTEND_URL=http://localhost:3000
      - LOG_LEVEL=info
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    networks:
      - hr-platform-network
    depends_on:
      mongodb:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (React + Nginx)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5000
        - REACT_APP_ML_SERVICE_URL=http://localhost:8000
    container_name: hr-platform-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - hr-platform-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (optional - for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: hr-platform-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hr-platform-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (for production scaling)
  nginx:
    image: nginx:alpine
    container_name: hr-platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - hr-platform-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  ml_models:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  redis_data:
    driver: local

networks:
  hr-platform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16